; docformat = 'rst'
;
; PURPOSE:
; The purpose of this program is display a directory tree in a widget.
; Instead of using the IDL file_search() function, it spawn a powershell
; command to improve speed. Tests have shown that this reduces the 
; execution time for large directory trees by more than 50%. Short  
; directory trees, on the contrary are not as fast because of the time lost
; spawning the powershell command.
;
;******************************************************************************************;
;  MIT License                                                                             ;
;                                                                                          ;
;  Copyright (c) 2017 heldermarchetto                                                      ;
;                                                                                          ;
;  Permission is hereby granted, free of charge, to any person obtaining a copy            ;
;  of this software and associated documentation files (the "Software"), to deal           ;
;  in the Software without restriction, including without limitation the rights            ;
;  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell               ;
;  copies of the Software, and to permit persons to whom the Software is                   ;
;  furnished to do so, subject to the following conditions:                                ;
;                                                                                          ;
;  The above copyright notice and this permission notice shall be included in all          ;
;  copies or substantial portions of the Software.                                         ;
;                                                                                          ;
;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR              ;
;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                ;
;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE             ;
;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER                  ;
;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,           ;
;  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE           ;
;  SOFTWARE.                                                                               ;
;******************************************************************************************;
;
;+
; The purpose of this program is build a tree widget.
;   
; The program requires IDL version >8.0 and runs only on Windows machines.
; 
; :Categories:
;    Widgets
;       
; :Examples:
;     To create a widget tree compile and run the example::
;
;        Resolve_Routine, 'directoryTree__define'
;        testDirTree
;
; :Author:
;    Helder Marchetto::
;        E-mail: helder@marchetto.com
;        IDL Programming blog: http://idl.marchetto.de/
;
; :History:
;    Modification History::
;      Written by: Helder Marchetto. 16 Mar 2017.
;       
; :Copyright:
;     Copyright (c) 2017, Helder Marhetto.
;-

function getGraphics, graphicsName
case graphicsName of
   'root':begin
            b0 = [[205, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,205],$
                  [ 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51],$
                  [ 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46],$
                  [ 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40],$
                  [ 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35],$
                  [ 30, 30, 30, 30, 30, 30, 30, 30, 29, 18, 25, 30, 30, 19, 23, 30, 27, 41, 23, 19, 29, 30, 29, 33, 37, 14, 26, 30, 30, 29, 33, 18, 30, 30, 30, 30, 30, 30, 30, 30],$
                  [ 24, 24, 24, 24, 24, 24, 24, 24,175,216, 15, 24,210,215, 19, 88,234,255,250,138, 12, 29,178,254,255,217, 45, 22, 67,241,255, 79, 24, 24, 24, 24, 24, 24, 24, 24],$
                  [ 19, 19, 19, 19, 19, 19, 19, 19,177,221, 12, 70,255,120, 19,226,201, 41,119,255, 69,108,255, 97, 48,216,195, 11,134,252, 57, 35, 19, 19, 19, 19, 19, 19, 19, 19],$
                  [ 13, 13, 13, 13, 13, 13, 13, 13,175,221,  7,182,239, 26, 27,255,120, 13, 20,255,125,147,246,  7, 13,140,251,  7,135,245,  7, 13, 13, 13, 13, 13, 13, 13, 13, 13],$
                  [  8,  8,  8,  8,  8,  8,  8,  8,173,251,239,255,126,  5, 13,249,137,  6, 29,255,119,130,252, 14,  8,152,246,  4,133,245,  4,  8,  8,  8,  8,  8,  8,  8,  8,  8],$
                  [ 11, 11, 11, 11, 11, 11, 11, 11,174,230, 72,145,254, 73, 10,166,240,118,181,251, 52, 50,249,178,120,243,171, 55,201,250,145, 44, 11, 11, 11, 11, 11, 11, 11, 11],$
                  [ 16, 16, 16, 16, 16, 16, 16, 16,176,221,  8, 34,255,136, 16, 24,135,190,178, 83, 16, 16, 71,173,192,146, 30, 65,211,251,162, 59, 16, 16, 16, 16, 16, 16, 16, 16],$
                  [ 22, 22, 22, 22, 22, 22, 22, 22,178,241,152,205,254, 86, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,136,241, 16, 22, 22, 22, 22, 22, 22, 22, 22, 22],$
                  [ 27, 27, 27, 27, 27, 27, 27, 27,105,161,160,148, 80, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 31, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27],$
                  [ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32],$
                  [ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38],$
                  [ 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],$
                  [ 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49],$
                  [ 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54],$
                  [205, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,205]]
            b1 = [[222,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,222],$
                  [119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119],$
                  [112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112],$
                  [104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104],$
                  [ 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96],$
                  [ 88, 88, 88, 88, 88, 88, 88, 88, 83, 46, 73, 88, 81, 47, 69, 88, 73, 67, 46, 57, 87, 88, 85, 66, 60, 43, 77, 88, 88, 74, 58, 53, 88, 88, 88, 88, 88, 88, 88, 88],$
                  [ 80, 80, 80, 80, 80, 80, 80, 80,194,216, 50, 80,220,215, 65,126,235,255,250,138, 39, 84,190,254,255,217, 50, 73,112,242,255, 97, 80, 80, 80, 80, 80, 80, 80, 80],$
                  [ 73, 73, 73, 73, 73, 73, 73, 73,195,221, 45,111,255,134, 73,232,201, 86,150,255, 73,141,255,117, 95,224,195, 42,161,252, 81, 85, 73, 73, 73, 73, 73, 73, 73, 73],$
                  [ 65, 65, 65, 65, 65, 65, 65, 65,192,221, 27,193,239, 65, 75,255,121, 65, 70,255,125,170,246, 34, 65,165,251, 33,161,245, 34, 65, 65, 65, 65, 65, 65, 65, 65, 65],$
                  [ 57, 57, 57, 57, 57, 57, 57, 57,189,251,239,255,128, 34, 61,250,137, 42, 73,255,126,155,252, 27, 56,172,246, 35,156,245, 28, 54, 57, 57, 57, 57, 57, 57, 57, 57],$
                  [ 61, 61, 61, 61, 61, 61, 61, 61,191,230, 95,168,254, 75, 60,184,240,119,183,251, 84, 92,250,178,122,243,180, 94,204,250,145, 53, 61, 61, 61, 61, 61, 61, 61, 61],$
                  [ 69, 69, 69, 69, 69, 69, 69, 69,193,221, 39, 75,255,138, 67, 75,161,204,195,120, 69, 69,112,191,206,169, 79,107,221,251,173, 99, 69, 69, 69, 69, 69, 69, 69, 69],$
                  [ 76, 76, 76, 76, 76, 76, 76, 76,196,241,152,205,254,117, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,164,243, 59, 76, 76, 76, 76, 76, 76, 76, 76, 76],$
                  [ 84, 84, 84, 84, 84, 84, 84, 84,142,185,184,174,123, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 87, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84],$
                  [ 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92],$
                  [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100],$
                  [108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108],$
                  [115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115],$
                  [123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123],$
                  [223,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,223]]
            b2 = [[238,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,238],$
                  [180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180],$
                  [170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170],$
                  [160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160],$
                  [151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151],$
                  [141,141,141,141,141,141,141,141,132, 72,118,141,129, 72,111,141,115, 91, 68, 91,141,141,137, 96, 81, 68,124,141,141,116, 81, 85,141,141,141,141,141,141,141,141],$
                  [131,131,131,131,131,131,131,131,212,216, 82,131,229,215,108,161,235,255,250,138, 65,134,201,254,255,217, 54,120,154,243,255,114,131,131,131,131,131,131,131,131],$
                  [121,121,121,121,121,121,121,121,211,221, 76,149,255,146,121,238,202,127,177,255, 78,172,255,137,137,232,195, 70,186,252,103,130,121,121,121,121,121,121,121,121],$
                  [111,111,111,111,111,111,111,111,207,221, 44,203,240,101,119,255,123,111,115,255,125,190,246, 59,111,186,251, 56,184,245, 59,111,111,111,111,111,111,111,111,111],$
                  [101,101,101,101,101,101,101,101,204,251,239,255,130, 62,104,251,137, 75,113,255,132,177,252, 38, 99,190,246, 63,177,245, 50, 96,101,101,101,101,101,101,101,101],$
                  [106,106,106,106,106,106,106,106,206,230,116,188,254, 77,105,201,240,119,185,251,114,130,251,178,124,243,188,129,207,250,145, 61,106,106,106,106,106,106,106,106],$
                  [116,116,116,116,116,116,116,116,209,221, 65,113,255,139,114,121,185,218,211,154,116,116,148,208,218,191,124,145,229,251,183,136,116,116,116,116,116,116,116,116],$
                  [126,126,126,126,126,126,126,126,212,241,152,205,254,145,126,126,126,126,126,126,126,126,126,126,126,126,126,126,189,245, 99,126,126,126,126,126,126,126,126,126],$
                  [136,136,136,136,136,136,136,136,177,207,206,200,164,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,138,136,136,136,136,136,136,136,136,136,136],$
                  [146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146],$
                  [155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155],$
                  [165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165],$
                  [175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175],$
                  [185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185],$
                  [239,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,239]]
            b3 = [[ 29,180,247,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247,176, 26],$
                  [186,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,176],$
                  [249,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255],$
                  [249,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247],$
                  [191,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,181],$
                  [ 33,192,249,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,249,188, 29]]
            sb0 = size(b0,/dimensions)
            button = make_array(4, sb0[0],sb0[1], /byte)
            button[0,*,*] = b0
            button[1,*,*] = b1
            button[2,*,*] = b2
            button[3,*,*] = b3
            return, transpose(button,[1,2,0])
          end
 'folder':begin
            b0 = [[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  3,  7,  5,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  5,  7,  3],$
                  [ 10,117,124,122,120,118,118,118,118,118,119,121,123,124,103,  8],$
                  [ 43,229,231,230,229,228,228,228,228,228,229,229,231,231,223, 23],$
                  [ 28,232,233,232,231,231,232,232,232,232,232,232,233,234,233,  0],$
                  [ 32,235,235,234,233,233,233,233,233,233,234,234,236,236,235, 18],$
                  [ 58,238,238,238,237,237,237,237,237,237,237,236,237,238,237, 29],$
                  [ 58,240,240,239,239,239,239,239,239,239,240,240,241,241,241, 29],$
                  [ 65,241,242,242,241,241,241,242,242,242,242,242,242,243,243, 58],$
                  [ 88,243,243,243,242,243,243,243,243,243,244,244,244,244,244, 58],$
                  [ 88,244,244,244,243,243,237,232,233,233,233,233,234,235,225, 37],$
                  [ 78,238,239,239,239,239,229,235,236,236,236,236,237,237,205,  0],$
                  [  0,142,146,146,146,146,147,147,147,147,147,148,148,149,127,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]]
            b1 = [[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  2,  4,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  4,  2],$
                  [  7, 78, 81, 76, 72, 70, 70, 70, 70, 71, 72, 74, 77, 81, 68,  5],$
                  [ 30,169,173,170,168,167,167,167,167,168,168,170,173,176,165, 16],$
                  [ 20,175,179,176,175,175,174,175,175,176,177,178,180,183,177,  0],$
                  [ 24,181,185,182,181,180,180,181,181,182,183,184,186,190,183, 13],$
                  [ 43,193,197,195,193,192,191,191,191,191,192,193,194,197,188, 22],$
                  [ 41,200,204,202,201,201,201,201,202,202,203,205,207,209,201, 21],$
                  [ 47,207,210,208,208,207,208,208,209,210,210,212,213,215,209, 44],$
                  [ 65,213,215,214,213,213,213,214,215,215,216,216,218,219,215, 44],$
                  [ 67,218,219,218,218,217,196,185,186,186,187,189,192,195,185, 29],$
                  [ 63,204,206,204,204,202,176,189,191,191,191,192,193,193,158,  0],$
                  [  0,112,116,115,114,113,116,115,115,115,116,119,122,125,105,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]]
            b2 = [[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  0,  3,  4,  2,  1,  1,  1,  1,  1,  1,  2,  2,  3,  5,  2,  0],$
                  [  2, 40, 56, 50, 47, 46, 46, 46, 47, 48, 49, 51, 54, 60, 35,  1],$
                  [  2, 48, 66, 61, 58, 57, 57, 57, 58, 59, 60, 62, 65, 71, 46,  0],$
                  [  3, 56, 74, 68, 65, 64, 64, 64, 65, 66, 67, 70, 74, 80, 52,  1],$
                  [  5, 80, 99, 94, 90, 87, 86, 85, 84, 84, 84, 85, 88, 93, 60,  3],$
                  [  5, 95,113,108,105,105,105,106,108,109,111,114,118,123, 92,  4],$
                  [  7,112,126,122,120,120,121,122,123,125,127,129,133,137,112,  6],$
                  [ 10,127,138,135,134,134,135,136,138,139,140,142,144,148,126,  8],$
                  [ 15,141,149,147,145,145, 94, 67, 68, 69, 73, 78, 83, 89, 86, 10],$
                  [ 23,115,113,108,105, 95, 37, 68, 73, 72, 73, 74, 77, 79, 50,  0],$
                  [  0, 33, 35, 31, 27, 29, 36, 41, 42, 42, 42, 42, 46, 54, 44,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]]
            b3 = [[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  0,  2,  3,  5,  6,  6,  7,  7,  7,  7,  6,  6,  5,  3,  2,  0],$
                  [  9,149,168,173,177,179,181,182,182,181,179,177,173,168,135,  9],$
                  [  4,241,253,253,253,253,253,253,253,253,253,253,253,253,217,  1],$
                  [  7,247,253,253,253,253,253,253,253,253,253,253,253,253,228,  0],$
                  [ 12,253,253,253,253,253,253,253,253,253,253,253,253,253,238,  0],$
                  [ 20,253,253,253,253,253,253,253,253,253,253,253,253,253,245,  5],$
                  [ 31,253,253,253,253,253,253,253,253,253,253,253,253,253,252, 10],$
                  [ 41,253,253,253,253,253,253,253,253,253,253,253,253,253,253, 20],$
                  [ 51,253,253,253,253,253,253,253,253,253,253,253,253,253,253, 32],$
                  [ 62,253,253,253,253,253,253,253,253,253,253,253,253,253,233, 22],$
                  [ 53,250,253,253,253,253,253,253,253,253,253,253,253,253,204,  0],$
                  [  0,116,128,128,128,128,128,128,128,128,128,128,128,128,101,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],$
                  [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]]
            sb0 = size(b0,/dimensions)
            button = make_array(4, sb0[0],sb0[1], /byte)
            button[0,*,*] = b0
            button[1,*,*] = b1
            button[2,*,*] = b2
            button[3,*,*] = b3
            return, transpose(button,[1,2,0])
          end
     else:begin
            b0 = [[255,255,255,255,255,193, 70,  9,  9,  9,  9,  9,  9, 70,193,255,255,255,255,255],$
                  [255,255,255,194, 72, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 72,194,255,255,255],$
                  [255,255,195, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,195,255,255],$
                  [255,195, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,195,255],$
                  [255, 79, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 79,255],$
                  [197, 22, 22, 22, 22, 22, 22, 22, 22, 27, 13, 22, 22, 22, 22, 22, 22, 22, 22,197],$
                  [ 83, 25, 25, 25, 25, 25, 25, 25, 83,255, 75, 25, 25, 25, 25, 25, 25, 25, 25, 83],$
                  [ 28, 28, 28, 28, 28, 28, 28, 28, 54,161, 51, 28, 28, 28, 28, 28, 28, 28, 28, 28],$
                  [ 30, 30, 30, 30, 30, 30, 30, 30, 59,193, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30],$
                  [ 33, 33, 33, 33, 33, 33, 33, 33, 82,255,110, 16, 32, 33, 33, 33, 33, 33, 33, 33],$
                  [ 36, 36, 36, 36, 36, 36, 42, 57, 83,161,240,169, 29, 41, 36, 36, 36, 36, 36, 36],$
                  [ 38, 38, 38, 40, 52, 67, 77, 77, 77, 77,171,254, 45, 76, 67, 52, 40, 38, 38, 38],$
                  [ 41, 41, 59, 76, 78, 78, 78, 98, 72, 62,207,238, 61, 78, 78, 78, 75, 58, 41, 41],$
                  [ 96, 49, 78, 78, 78, 78, 78,116,244,255,240,133, 78, 78, 78, 78, 78, 78, 48, 96],$
                  [150, 66, 79, 79, 79, 79, 79, 79, 82, 94, 81, 79, 79, 79, 79, 79, 79, 79, 64,202],$
                  [255,133, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79,135,255],$
                  [255,229, 94, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 97,231,255],$
                  [255,255,224, 94, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 97,225,255,255],$
                  [255,255,255,230,134, 81, 80, 80, 80, 80, 80, 80, 80, 80, 81,136,232,255,255,255],$
                  [255,255,255,255,255,200,143, 89, 82, 81, 81, 82, 89,146,201,255,255,255,255,255]]
            b1 = [[255,255,255,255,255,206,107, 58, 58, 58, 58, 58, 58,107,206,255,255,255,255,255],$
                  [255,255,255,207,110, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,110,207,255,255,255],$
                  [255,255,208, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,208,255,255],$
                  [255,209, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,209,255],$
                  [255,119, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,119,255],$
                  [210, 77, 77, 77, 77, 77, 77, 77, 77, 59, 46, 77, 77, 77, 77, 77, 77, 77, 77,210],$
                  [124, 81, 81, 81, 81, 81, 81, 81,125,255, 86, 81, 81, 81, 81, 81, 81, 81, 81,124],$
                  [ 85, 85, 85, 85, 85, 85, 85, 85,104,177, 91, 85, 85, 85, 85, 85, 85, 85, 85, 85],$
                  [ 89, 89, 89, 89, 89, 89, 89, 89,110,197, 54, 89, 89, 89, 89, 89, 89, 89, 89, 89],$
                  [ 93, 93, 93, 93, 93, 93, 93, 93,128,253,111, 38, 90, 93, 93, 93, 93, 93, 93, 93],$
                  [ 97, 97, 97, 97, 97, 97,100,107,123,181,239,165, 60, 99, 97, 97, 97, 97, 97, 97],$
                  [101,101,101,101,107,114,119,119,119,119,188,249, 64,119,114,107,101,101,101,101],$
                  [105,105,113,121,122,122,122,138, 84, 79,210,235, 95,122,122,122,121,113,105,105],$
                  [145,111,125,125,125,125,125,153,244,250,242,161,125,125,125,125,125,125,110,145],$
                  [183,122,128,128,128,128,128,128,130,139,130,128,128,128,128,128,128,128,121,219],$
                  [251,162,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,163,251],$
                  [243,221,140,133,133,133,133,133,133,133,133,133,133,133,133,133,133,141,222,243],$
                  [240,240,220,142,136,136,136,136,136,136,136,136,136,136,136,136,144,220,240,240],$
                  [240,240,240,223,168,139,139,139,139,139,139,139,139,139,139,170,224,240,240,240],$
                  [240,240,240,240,240,205,174,145,142,141,141,142,145,176,206,240,240,240,240,240]]
            b2 = [[255,255,255,255,255,217,141,102,102,102,102,102,102,141,217,255,255,255,255,255],$
                  [255,255,255,218,144,107,107,107,107,107,107,107,107,107,107,144,218,255,255,255],$
                  [255,255,219,112,112,112,112,112,112,112,112,112,112,112,112,112,112,219,255,255],$
                  [255,221,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,221,255],$
                  [255,156,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,156,255],$
                  [223,127,127,127,127,127,127,127,127, 90, 76,127,127,127,127,127,127,127,127,223],$
                  [163,132,132,132,132,132,132,132,163,255, 97,132,132,132,132,132,132,132,132,163],$
                  [137,137,137,137,137,137,137,137,151,191,128,137,137,137,137,137,137,137,137,137],$
                  [142,142,142,142,142,142,142,142,156,202, 72,142,142,142,142,142,142,142,142,142],$
                  [147,147,147,147,147,147,147,147,171,253,113, 59,143,147,147,147,147,147,147,147],$
                  [152,152,152,152,152,152,152,152,159,200,242,165, 86,152,152,152,152,152,152,152],$
                  [157,157,157,157,157,157,157,157,157,157,206,249, 81,157,157,157,157,157,157,157],$
                  [162,162,162,162,162,162,162,173, 96, 94,215,236,125,162,162,162,162,162,162,162],$
                  [188,167,167,167,167,167,167,186,246,250,245,189,167,167,167,167,167,167,167,188],$
                  [213,172,172,172,172,172,172,172,173,179,173,172,172,172,172,172,172,172,172,234],$
                  [251,192,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,192,251],$
                  [243,225,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,225,243],$
                  [240,240,226,187,187,187,187,187,187,187,187,187,187,187,187,187,187,226,240,240],$
                  [240,240,240,227,203,192,192,192,192,192,192,192,192,192,192,203,227,240,240,240],$
                  [240,240,240,240,240,218,207,197,197,197,197,197,197,207,218,240,240,240,240,240]]
            b3 = [[  0,  0,  0,  0,  0, 14,103,173,223,247,247,223,171, 97, 10,  0,  0,  0,  0,  0],$
                  [  0,  0,  0,  1,110,238,255,255,255,255,255,255,255,255,237,104,  0,  0,  0,  0],$
                  [  0,  0,  8,175,255,255,255,255,255,255,255,255,255,255,255,255,168,  6,  0,  0],$
                  [  0,  2,177,255,255,255,255,255,255,255,255,255,255,255,255,255,255,168,  0,  0],$
                  [  0,116,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,104,  0],$
                  [ 18,242,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,237, 10],$
                  [109,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 97],$
                  [186,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,172],$
                  [234,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,222],$
                  [253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247],$
                  [253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,248],$
                  [235,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,222],$
                  [188,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,174],$
                  [115,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,103],$
                  [ 20,244,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,239, 14],$
                  [  0,122,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,110,  0],$
                  [  0,  3,184,255,255,255,255,255,255,255,255,255,255,255,255,255,255,176,  2,  0],$
                  [  0,  0, 10,184,255,255,255,255,255,255,255,255,255,255,255,255,177,  8,  0,  0],$
                  [  0,  0,  0,  3,123,244,255,255,255,255,255,255,255,255,242,116,  2,  0,  0,  0],$
                  [  0,  0,  0,  0,  0, 20,115,188,235,253,253,235,186,109, 18,  0,  0,  0,  0,  0]]
            button[0,*,*] = b0
            button[1,*,*] = b1
            button[2,*,*] = b2
            button[3,*,*] = b3
            return, transpose(button,[1,2,0])
          end
endcase
end

function directoryTree::getTreeSub
return, *self.treeSub
end

function directoryTree::getTreeSubDictKey
return, *self.treeSubDictKey
end

function directoryTree::getTreeSubDictVal
return, *self.treeSubDictVal
end

function directoryTree::init, parentWidget, rootDir, notifyMethod=notifyMethod, notifyPro=notifyPro 
compile_Opt idl2
catch, theError
if theError ne 0 then begin
   catch, /Cancel
   help, /last_message, output=theErrorMessage
   for j=0,n_elements(theErrorMessage)-1 do print, theErrorMessage[j]
   return, 1
endif
if strlowcase(!version.os_family) ne 'windows' then begin
   void = dialog_message('This runs only on windows machines!', /error)
   return, 0
endif
if long((strsplit(!version.release,'.',/extract))[0]) lt 8 then begin
   void = dialog_message('Must use IDL version 8.0 or higher!', /error)
   return, 0
endif
self.wParent        = parentWidget               ;here is where the widget will fit
if strmid(rootDir,strlen(rootDir)-1) ne path_sep() then rootDir += path_sep()
self.rootDir        = rootDir                    ;this is the starting directory for the search
if ~(file_info(self.rootDir))[0].directory then begin
   void = dialog_message('Directory '+self.rootDir+' does not exist!', /error)
   return, 0
endif
self.treeSub        = ptr_new(/allocate_heap)    ;this pointer will contain all the nodes/leaves of the tree widget
self.treeSubDictKey = ptr_new(/allocate_heap)    ;this pointer will contain all keys of the widget tree   (ideally a dictionary)
self.treeSubDictVal = ptr_new(/allocate_heap)    ;this pointer will contain all values of the widget tree (ideally a dictionary)
self.notifyMethod   = (size(notifyMethod, /type) eq 8l) ? notifyMethod : {notUsed:1b, object:obj_new(), method:''}
self.notifyPro      = (size(notifyPro,    /type) eq 7l) ? notifyPro    : ''
self.rootIcon       = ptr_new(getGraphics('root'))
self.folderIcon     = ptr_new(getGraphics('folder'))
self->populateTree
return, 1
end

pro directoryTree::populateTree
compile_Opt idl2
catch, theError
if theError ne 0 then begin
   catch, /Cancel
   cd, current
   help, /last_message, output=theErrorMessage
   for j=0,n_elements(theErrorMessage)-1 do print, theErrorMessage[j]
   return
endif
widget_control, /hourglass
cd, self.rootDir, current=current
rootDirLowCase = strlowcase(self.rootDir)
;this is the command that retrieves the directories and that basically limits the performance 
spawn, 'powershell -WindowStyle Hidden "Get-ChildItem -Recurse | ?{ $_.PSIsContainer } | Select-Object FullName | Format-list *"', powerShellOutput, /noShell
if n_elements(powerShellOutput) lt 2 then begin
   print, 'help! this directory has no childs!'
   return
endif
goodPos = where(powerShellOutput ne '',cnt)
powerShellOutput = powerShellOutput[goodPos]
powerShellOutput = strmid(powerShellOutput, strlen('FullName : '))
;some strings overflow to the next line. These are strings that don't start with a drive letter. This will not necessarily work on non-windows machine because there are no drive letters!
overflow = where(strmid(powerShellOutput[0],0,3) ne strmid(powerShellOutput,0,3), cntOverflow)
if cntOverflow gt 0 then begin
   oList = list(powerShellOutput,/extract)
   foreach o, overflow do oList[o-1] = oList[o-1]+oList[o]
   oList->remove, overflow
   powerShellOutput = oList->toArray()
endif
fullPath = powerShellOutput[sort(powerShellOutput)]
len = strlen(self.rootDir)
powerShellOutput = strmid(fullPath,len)
powerShellOutput = strtrim(powerShellOutput,2)
pSep = path_sep()
splitDir = strsplit(powerShellOutput,pSep,count=cnt, /extract)
nLoop = n_elements(cnt)
isFolder = long(cnt lt shift(cnt,-1))
isFolder[-1] = 0b
treeLevel = 0l
notify = ''
if self.notifyMethod.notUsed then notify = self.notifyPro $
                             else notify = self.notifyPro

treeSub = lonarr(nLoop+1)
treeSubDictKey = strarr(nLoop+1)
treeSubDictVal = strarr(nLoop+1)

treeSub[0] = widget_tree(self.wParent, /folder, bitmap=*self.rootIcon, draggable=0, drop_events=0, multiple=0,  uvalue=notify, value=(strsplit(self.rootDir,pSep, /extract))[-1])
treeSubDictKey[0] = 'node'+strtrim(treeSub[0],2)
treeSubDictVal[0] = rootDirLowCase
treeSub[1] = widget_tree(treeSub[0], /folder, bitmap=*self.folderIcon, draggable=0, drop_events=0, multiple=0,  uvalue=notify, value=(splitDir[0])[-1])
treeSubDictKey[1] = 'node'+strtrim(treeSub[1],2)
treeSubDictVal[1] = strlowcase(fullPath[0])
if nLoop gt 1 then begin
   for i=1,nLoop-1 do begin
       if isFolder[i] then begin
          lastFolder = where(cnt[0:i-1] lt cnt[i],cntFolders)
          treeSub[i+1] = widget_tree(treeSub[lastFolder[-1]+1], /folder, bitmap=*self.folderIcon, draggable=0, drop_events=0, multiple=0,  uvalue=notify, value=(splitDir[i])[-1])
       endif else begin
          if cnt[i] eq 1 then parent = long(strmid(treeSubDictKey[(where(treeSubDictVal eq rootDirLowCase))[0]],4)) $
                         else parent = long(strmid(treeSubDictKey[(where(treeSubDictVal eq (rootDirLowCase+strlowcase(strjoin((splitDir[i])[0:-2],pSep)))))[0]],4))
          treeSub[i+1] = widget_tree(parent, bitmap=*self.folderIcon, draggable=0, drop_events=0, multiple=0,  uvalue=notify, value=(splitDir[i])[-1])
       endelse
       treeSubDictKey[i+1] = 'node'+strtrim(treeSub[i+1],2)
       treeSubDictVal[i+1] = strlowcase(fullPath[i])
;       print, 'node'+strtrim(self.widgets.treeSub[-1],2)   + ' = ' + strlowcase(fullPath[i])
   endfor
endif
widget_control, treeSub[0], /set_tree_visible
if n_elements(treeSub) gt 1 then widget_control, treeSub[1], /set_tree_select
cd, current
*self.treeSub        = treeSub
*self.treeSubDictKey = treeSubDictKey
*self.treeSubDictVal = treeSubDictVal
end

pro testDirTree_cleanup, event
help, event
end

pro testDirTree_event, event
widget_control, event.top, get_uValue=info
nodeNr = (where((*info).treeSub eq event.id, cnt))[0]
selectInfo = 'Node ID = '+strtrim(event.id,2)
selectPos  = 'Position Nr. = '+strtrim(nodeNr,2)
SelectDir  = 'Directory = '+((*info).treeSubDictVal)[nodeNr]
widget_control, (*info).wInfo, set_value= [selectInfo,selectPos,SelectDir]
cgImage

end

pro testDirTree
wBase    = widget_base(col=2, xSize=550, ySize=400)
treeRoot = widget_tree(wBase, /folder, draggable=0, drop_events=0, /expanded, multiple=0, xsize=300, ysize = 400, uvalue=notifyPro)
wInfo    = widget_text(wBase, value='', xSize=40, ySize=3)
startDir = 'K:\webDownload\'
wTreeObj = obj_new('directoryTree',treeRoot,startDir, notifyPro='treeInfo')
treeSub        = wTreeObj->getTreeSub()
treeSubDictKey = wTreeObj->getTreeSubDictKey()
treeSubDictVal = wTreeObj->getTreeSubDictVal()

widget_control, wBase, /realize
info = ptr_new({treeObj:wTreeObj,$
                treeSub:treeSub,$
                treeSubDictKey:treeSubDictKey,$
                treeSubDictVal:treeSubDictVal,$
                wInfo:wInfo})
widget_control, wBase, set_uValue= info
xmanager, 'testDirTree', wBase, cleanup = 'testDirTree_cleanup', event_handler = 'testDirTree_event', /no_block
end

pro directoryTree__define, class
compile_opt idl2

treeNotifier = {treeNotifyObj, notUsed:1b, object:obj_new(), method:''}

class  = {directoryTree,$
          wParent:0l,$
          rootDir:'',$
          treeSub:ptr_new(),$
          treeSubDictKey:ptr_new(),$
          treeSubDictVal:ptr_new(),$
          rootIcon:ptr_new(),$
          folderIcon:ptr_new(),$
          notifyMethod:{treeNotifyObj},$
          notifyPro:''}
end
